{"ast":null,"code":"/*!\nFullCalendar v5.10.1\nDocs & License: https://fullcalendar.io/\n(c) 2021 Adam Shaw\n*/\nimport moment from 'moment';\nimport { createPlugin, CalendarApi } from '@fullcalendar/common';\nfunction toMoment(date, calendar) {\n  if (!(calendar instanceof CalendarApi)) {\n    throw new Error('must supply a CalendarApi instance');\n  }\n  var dateEnv = calendar.getCurrentData().dateEnv;\n  return convertToMoment(date, dateEnv.timeZone, null, dateEnv.locale.codes[0]);\n}\nfunction toMomentDuration(fcDuration) {\n  return moment.duration(fcDuration); // moment accepts all the props that fc.Duration already has!\n}\n\nfunction formatWithCmdStr(cmdStr, arg) {\n  var cmd = parseCmdStr(cmdStr);\n  if (arg.end) {\n    var startMom = convertToMoment(arg.start.array, arg.timeZone, arg.start.timeZoneOffset, arg.localeCodes[0]);\n    var endMom = convertToMoment(arg.end.array, arg.timeZone, arg.end.timeZoneOffset, arg.localeCodes[0]);\n    return formatRange(cmd, createMomentFormatFunc(startMom), createMomentFormatFunc(endMom), arg.defaultSeparator);\n  }\n  return convertToMoment(arg.date.array, arg.timeZone, arg.date.timeZoneOffset, arg.localeCodes[0]).format(cmd.whole); // TODO: test for this\n}\n\nvar main = createPlugin({\n  cmdFormatter: formatWithCmdStr\n});\nfunction createMomentFormatFunc(mom) {\n  return function (cmdStr) {\n    return cmdStr ? mom.format(cmdStr) : '' // because calling with blank string results in ISO8601 :(\n    ;\n  };\n}\n\nfunction convertToMoment(input, timeZone, timeZoneOffset, locale) {\n  var mom;\n  if (timeZone === 'local') {\n    mom = moment(input);\n  } else if (timeZone === 'UTC') {\n    mom = moment.utc(input);\n  } else if (moment.tz) {\n    mom = moment.tz(input, timeZone);\n  } else {\n    mom = moment.utc(input);\n    if (timeZoneOffset != null) {\n      mom.utcOffset(timeZoneOffset);\n    }\n  }\n  mom.locale(locale);\n  return mom;\n}\nfunction parseCmdStr(cmdStr) {\n  var parts = cmdStr.match(/^(.*?)\\{(.*)\\}(.*)$/); // TODO: lookbehinds for escape characters\n  if (parts) {\n    var middle = parseCmdStr(parts[2]);\n    return {\n      head: parts[1],\n      middle: middle,\n      tail: parts[3],\n      whole: parts[1] + middle.whole + parts[3]\n    };\n  }\n  return {\n    head: null,\n    middle: null,\n    tail: null,\n    whole: cmdStr\n  };\n}\nfunction formatRange(cmd, formatStart, formatEnd, separator) {\n  if (cmd.middle) {\n    var startHead = formatStart(cmd.head);\n    var startMiddle = formatRange(cmd.middle, formatStart, formatEnd, separator);\n    var startTail = formatStart(cmd.tail);\n    var endHead = formatEnd(cmd.head);\n    var endMiddle = formatRange(cmd.middle, formatStart, formatEnd, separator);\n    var endTail = formatEnd(cmd.tail);\n    if (startHead === endHead && startTail === endTail) {\n      return startHead + (startMiddle === endMiddle ? startMiddle : startMiddle + separator + endMiddle) + startTail;\n    }\n  }\n  var startWhole = formatStart(cmd.whole);\n  var endWhole = formatEnd(cmd.whole);\n  if (startWhole === endWhole) {\n    return startWhole;\n  }\n  return startWhole + separator + endWhole;\n}\nexport default main;\nexport { toMoment, toMomentDuration };\n//# sourceMappingURL=main.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}